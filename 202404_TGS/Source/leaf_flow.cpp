//=============================================================================
// 
//  葉っぱ処理 [leaf_flow.cpp]
//  Author : 相馬靜雅
// 
//=============================================================================
#include "leaf_flow.h"
#include "manager.h"
#include "calculation.h"
#include "input.h"
#include "game.h"
#include "course.h"

//==========================================================================
// 定数定義
//==========================================================================
namespace
{
	const std::string TEXTURE = "data\\TEXTURE\\effect\\leaf.png";	// テクスチャのファイル
}

namespace StateTime	// 状態別時間
{
	const float WAIT = 0.2f;	// 待機
	const float FADEOUT = 0.3f;	// フェードアウト
}

//==========================================================================
// 関数ポインタ
//==========================================================================
CLeafFlow::STATE_FUNC CLeafFlow::m_StateFunc[] =
{
	&CLeafFlow::StateFlow,		// 流れ
	&CLeafFlow::StateFadeOut,	// フェードアウト
};

//==========================================================================
// コンストラクタ
//==========================================================================
CLeafFlow::CLeafFlow(int nPriority) : CLeaf(nPriority)
{
	// 値のクリア
	m_fStateTimer = 0.0f;			// 状態カウンター
	m_state = CLeafFlow::State::STATE_FLOW;	// 状態
}

//==========================================================================
// デストラクタ
//==========================================================================
CLeafFlow::~CLeafFlow()
{

}

//==========================================================================
// 初期化処理
//==========================================================================
HRESULT CLeafFlow::Init()
{

	// 葉っぱの初期化
	CLeaf::Init();

	// 向き
	MyLib::Vector3 rot;
	rot.y = UtilFunc::Transformation::Random(-31, 31) * 0.1f;
	rot.x = D3DX_PI * 0.5f;
	SetRotation(rot);

	return S_OK;
}

//==========================================================================
// 更新処理
//==========================================================================
void CLeafFlow::Update()
{
	UpdateState();

	// 更新処理
	CObject3D::Update();
}

//==========================================================================
// 状態更新
//==========================================================================
void CLeafFlow::UpdateState()
{
	// 状態タイマー
	m_fStateTimer += CManager::GetInstance()->GetDeltaTime();

	// 状態更新
	(this->*(m_StateFunc[m_state]))();
}

//==========================================================================
// 流れ
//==========================================================================
void CLeafFlow::StateFlow()
{
	MyLib::Vector3 pos = GetPosition();
	pos.x += 5.0f;
	SetPosition(pos);

	if (pos.x >= 20000.0f)
	{// 時間経過

		m_state = State::STATE_FADEOUT;
		m_fStateTimer = 0.0f;
	}
}

//==========================================================================
// フェードアウト
//==========================================================================
void CLeafFlow::StateFadeOut()
{
	float alpha = 1.0f - (m_fStateTimer / StateTime::FADEOUT);
	SetAlpha(alpha);

	if (m_fStateTimer >= StateTime::FADEOUT)
	{// 時間経過

		Uninit();
	}
}
