//=============================================================================
// 
//  アーチ状の魚障害物処理 [obstacle_fisharch.cpp]
//  Author : Ibuki Okusada
// 
//=============================================================================
#include "obstacle_fisharch.h"

//==========================================================================
// 定数定義
//==========================================================================
namespace
{
	const int NUM_FISH = (10);	// 魚の総数
}

//==========================================================================
// コンストラクタ
//==========================================================================
CObstacle_FishArch::CObstacle_FishArch(int nPriority,
	CObject::LAYER layer) : CMap_Obstacle(nPriority, layer)
{
	// 値のクリア
	m_FishList.clear();
}

//==========================================================================
// デストラクタ
//==========================================================================
CObstacle_FishArch::~CObstacle_FishArch()
{

}

//==========================================================================
// 生成処理
//==========================================================================
CObstacle_FishArch* CObstacle_FishArch::Create(const CMap_ObstacleManager::SObstacleInfo& info)
{
	// メモリの確保
	CObstacle_FishArch* pObj = DEBUG_NEW CObstacle_FishArch;

	if (pObj != nullptr)
	{
		pObj->SetObstacleInfo(info);
	}

	return pObj;
}

//==========================================================================
// 初期化処理
//==========================================================================
HRESULT CObstacle_FishArch::Init()
{
	CMap_Obstacle::GetListObj().Regist(this);

	return S_OK;
}

//==========================================================================
// 終了処理
//==========================================================================
void CObstacle_FishArch::Uninit()
{
	for (auto& it : m_FishList)
	{
		it.Uninit();
	}

	// 終了処理
	CMap_Obstacle::Uninit();
}

//==========================================================================
// 削除
//==========================================================================
void CObstacle_FishArch::Kill()
{
	for (auto& it : m_FishList)
	{
		it.Uninit();
	}

	// 終了処理
	CMap_Obstacle::Uninit();
}

//==========================================================================
// 更新処理
//==========================================================================
void CObstacle_FishArch::Update()
{
	
}

//==========================================================================
// 描画処理
//==========================================================================
void CObstacle_FishArch::Draw()
{
	// マトリックス合成
	CObjectX::CalWorldMtx();
}
